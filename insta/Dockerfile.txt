# Complete Insta360 Directory Processor
# Mount camera directory and get fully processed videos with perfect timestamps
# Usage: docker run --rm --gpus all -v /path/to/camera:/input -v /path/to/output:/output insta360-complete

FROM nvidia/cuda:12.9-devel-ubuntu20.04

# Prevent interactive prompts
ENV DEBIAN_FRONTEND=noninteractive

# Install system dependencies
RUN apt-get update && apt-get install -y \
    software-properties-common \
    wget \
    curl \
    git \
    build-essential \
    cmake \
    pkg-config \
    python3 \
    python3-pip \
    python3-dev \
    jq \
    bc \
    parallel \
    tree \
    htop \
    libgl1-mesa-glx \
    libglib2.0-0 \
    libxrender1 \
    libxext6 \
    libsm6 \
    libxrandr2 \
    libxss1 \
    libxcursor1 \
    libxcomposite1 \
    libasound2 \
    libxi6 \
    libxtst6 \
    xvfb \
    x11-utils \
    mesa-utils \
    libglfw3 \
    libglfw3-dev \
    libglew-dev \
    libglm-dev \
    vulkan-utils \
    libvulkan1 \
    libvulkan-dev \
    ffmpeg \
    && rm -rf /var/lib/apt/lists/*

# Install Python packages
RUN pip3 install --upgrade pip && \
    pip3 install numpy opencv-python pillow tqdm rich

# Create working directories
WORKDIR /app
RUN mkdir -p /input /output /logs /temp

# Copy MediaSDK installation files
COPY libMediaSDK-dev-*.deb /tmp/

# Install MediaSDK
RUN dpkg -i /tmp/libMediaSDK-dev-*.deb || true && \
    apt-get update && \
    apt-get install -f -y && \
    rm /tmp/libMediaSDK-dev-*.deb && \
    ldconfig

# Set up environment variables
ENV NVIDIA_VISIBLE_DEVICES=all
ENV NVIDIA_DRIVER_CAPABILITIES=compute,utility,graphics
ENV DISPLAY=:99
ENV PYTHONUNBUFFERED=1

# Create main processing script (fix heredoc syntax)
COPY <<EOF /app/process_directory.py
#!/usr/bin/env python3
"""
Complete Insta360 Directory Processor
Processes entire camera download directories with perfect organization
"""

import os
import sys
import subprocess
import json
import time
import logging
import shutil
from datetime import datetime, timedelta
from pathlib import Path
from typing import Dict, List, Optional, Tuple
import concurrent.futures
import threading
from rich.console import Console
from rich.progress import Progress, TaskID, BarColumn, TimeRemainingColumn
from rich.table import Table
from rich.live import Live
import signal

console = Console()

class Insta360DirectoryProcessor:
    def __init__(self, input_dir: str, output_dir: str, max_workers: int = 2):
        self.input_dir = Path(input_dir)
        self.output_dir = Path(output_dir)
        self.max_workers = max_workers
        self.stats = {
            "total_found": 0,
            "processed": 0,
            "failed": 0,
            "skipped": 0,
            "start_time": datetime.now(),
            "cameras": {},
            "processing_rate": 0.0
        }
        self.stop_processing = False
        self.current_tasks = {}
        
        # Setup logging
        logging.basicConfig(
            level=logging.INFO,
            format='%(asctime)s - %(levelname)s - %(message)s',
            handlers=[
                logging.FileHandler('/logs/processing.log'),
                logging.StreamHandler()
            ]
        )
        
        # Setup signal handling
        signal.signal(signal.SIGINT, self.signal_handler)
        signal.signal(signal.SIGTERM, self.signal_handler)
    
    def signal_handler(self, signum, frame):
        console.print(f"[yellow]Received signal {signum}, shutting down gracefully...[/yellow]")
        self.stop_processing = True
    
    def discover_videos(self) -> List[Dict]:
        """Discover all video files in camera directory structure"""
        console.print("[blue]🔍 Discovering videos...[/blue]")
        
        videos = []
        video_extensions = ['.insv', '.insp', '.mp4']
        
        # Walk through directory structure
        for root, dirs, files in os.walk(self.input_dir):
            for file in files:
                if any(file.lower().endswith(ext) for ext in video_extensions):
                    if file.lower().endswith(('.insv', '.insp')):  # Only process raw files
                        file_path = Path(root) / file
                        
                        video_info = {
                            'path': str(file_path),
                            'name': file,
                            'size_gb': file_path.stat().st_size / (1024**3),
                            'camera': self.extract_camera_info(str(file_path)),
                            'timestamp': self.extract_timestamp(file),
                            'relative_path': os.path.relpath(file_path, self.input_dir)
                        }
                        
                        videos.append(video_info)
        
        # Sort by timestamp
        videos.sort(key=lambda x: x['timestamp'] if x['timestamp'] else datetime.min)
        
        # Update stats
        self.stats["total_found"] = len(videos)
        for video in videos:
            camera = video['camera']
            if camera not in self.stats["cameras"]:
                self.stats["cameras"][camera] = {"count": 0, "processed": 0, "failed": 0}
            self.stats["cameras"][camera]["count"] += 1
        
        console.print(f"[green]Found {len(videos)} videos across {len(self.stats['cameras'])} cameras[/green]")
        
        return videos
    
    def extract_camera_info(self, file_path: str) -> str:
        """Extract camera information from file path"""
        path_parts = file_path.split(os.sep)
        
        # Look for camera folder (DCIM/Camera01, DCIM/Camera02, etc.)
        for i, part in enumerate(path_parts):
            if part.lower().startswith('camera') and part[6:].isdigit():
                return part
        
        # Fallback: look for numbered sequences in filename
        filename = os.path.basename(file_path)
        if 'VID_' in filename:
            parts = filename.split('_')
            if len(parts) >= 4:
                return f"Camera{parts[3]}"
        
        return "Unknown"
    
    def extract_timestamp(self, filename: str) -> Optional[datetime]:
        """Extract timestamp from Insta360 filename"""
        try:
            # Insta360 format: VID_YYYYMMDD_HHMMSS_XX_NNN.insv
            if filename.startswith('VID_'):
                parts = filename.split('_')
                if len(parts) >= 3:
                    date_str = parts[1]
                    time_str = parts[2]
                    
                    # Parse date and time
                    year = int(date_str[:4])
                    month = int(date_str[4:6])
                    day = int(date_str[6:8])
                    hour = int(time_str[:2])
                    minute = int(time_str[2:4])
                    second = int(time_str[4:6])
                    
                    return datetime(year, month, day, hour, minute, second)
        except Exception as e:
            logging.warning(f"Could not parse timestamp from {filename}: {e}")
        
        return None
    
    def get_output_path(self, video_info: Dict) -> str:
        """Generate organized output path"""
        camera = video_info['camera']
        timestamp = video_info['timestamp']
        original_name = Path(video_info['name']).stem
        
        # Create organized directory structure
        if timestamp:
            date_folder = timestamp.strftime("%Y-%m-%d")
            time_str = timestamp.strftime("%H%M%S")
            output_filename = f"{camera}_{timestamp.strftime('%Y%m%d_%H%M%S')}_{original_name}.mp4"
        else:
            date_folder = "unknown_date"
            time_str = "unknown"
            output_filename = f"{camera}_unknown_{original_name}.mp4"
        
        output_path = self.output_dir / camera / date_folder / output_filename
        return str(output_path)
    
    def is_already_processed(self, video_info: Dict) -> bool:
        """Check if video is already processed"""
        output_path = self.get_output_path(video_info)
        return os.path.exists(output_path)
    
    def process_single_video(self, video_info: Dict, progress: Progress, task_id: TaskID) -> Dict:
        """Process a single video with multiple fallback methods"""
        input_path = video_info['path']
        output_path = self.get_output_path(video_info)
        
        # Ensure output directory exists
        os.makedirs(os.path.dirname(output_path), exist_ok=True)
        
        result = {
            'input': input_path,
            'output': output_path,
            'video_info': video_info,
            'success': False,
            'method': None,
            'duration': 0,
            'error': None,
            'file_size_mb': 0
        }
        
        start_time = time.time()
        
        try:
            progress.update(task_id, description=f"Processing {video_info['name']}")
            
            # Method 1: GPU AI stitching
            if self.try_gpu_stitching(input_path, output_path):
                result['success'] = True
                result['method'] = 'GPU_AI'
            
            # Method 2: Template stitching
            elif self.try_template_stitching(input_path, output_path):
                result['success'] = True
                result['method'] = 'Template'
            
            # Method 3: CPU fallback
            elif self.try_cpu_stitching(input_path, output_path):
                result['success'] = True
                result['method'] = 'CPU'
            
            else:
                result['error'] = 'All stitching methods failed'
            
            # Verify output
            if result['success'] and os.path.exists(output_path):
                file_size = os.path.getsize(output_path)
                result['file_size_mb'] = file_size / (1024**2)
                
                if file_size < 1024*1024:  # Less than 1MB is suspicious
                    result['success'] = False
                    result['error'] = 'Output file too small'
            
        except Exception as e:
            result['error'] = str(e)
        
        result['duration'] = time.time() - start_time
        
        # Update stats
        camera = video_info['camera']
        if result['success']:
            self.stats['processed'] += 1
            self.stats['cameras'][camera]['processed'] += 1
        else:
            self.stats['failed'] += 1
            self.stats['cameras'][camera]['failed'] += 1
        
        # Calculate processing rate
        elapsed = (datetime.now() - self.stats['start_time']).total_seconds()
        self.stats['processing_rate'] = self.stats['processed'] / max(elapsed / 3600, 0.01)  # per hour
        
        progress.update(task_id, advance=1)
        
        return result
    
    def try_gpu_stitching(self, input_path: str, output_path: str) -> bool:
        """Try GPU AI stitching"""
        try:
            cmd = self.get_stitcher_command(
                input_path, output_path,
                stitch_type='aistitch',
                output_size='7680x3840',
                enable_gpu=True
            )
            
            result = subprocess.run(cmd, capture_output=True, text=True, timeout=600)
            return result.returncode == 0 and os.path.exists(output_path)
            
        except Exception:
            return False
    
    def try_template_stitching(self, input_path: str, output_path: str) -> bool:
        """Try template stitching"""
        try:
            cmd = self.get_stitcher_command(
                input_path, output_path,
                stitch_type='template',
                output_size='3840x1920',
                enable_gpu=True
            )
            
            result = subprocess.run(cmd, capture_output=True, text=True, timeout=600)
            return result.returncode == 0 and os.path.exists(output_path)
            
        except Exception:
            return False
    
    def try_cpu_stitching(self, input_path: str, output_path: str) -> bool:
        """Try CPU fallback stitching"""
        try:
            cmd = self.get_stitcher_command(
                input_path, output_path,
                stitch_type='template',
                output_size='3840x1920',
                enable_gpu=False
            )
            
            result = subprocess.run(cmd, capture_output=True, text=True, timeout=1200)
            return result.returncode == 0 and os.path.exists(output_path)
            
        except Exception:
            return False
    
    def get_stitcher_command(self, input_path: str, output_path: str, 
                           stitch_type: str = 'template', 
                           output_size: str = '3840x1920',
                           enable_gpu: bool = True) -> List[str]:
        """Build stitcher command with parameters"""
        
        # Find the binary
        binary = None
        for candidate in ['stitcherSDKTest', 'MediaSDKTest']:
            if shutil.which(candidate):
                binary = candidate
                break
        
        if not binary:
            raise Exception("No MediaSDK binary found")
        
        cmd = [
            binary,
            '-inputs', input_path,
            '-output', output_path,
            '-stitch_type', stitch_type,
            '-output_size', output_size
        ]
        
        if not enable_gpu:
            cmd.extend(['-disable_cuda', 'true', '-enable_soft_encode', 'true'])
        
        return cmd
    
    def create_status_table(self) -> Table:
        """Create status table for display"""
        table = Table(title="Insta360 Processing Status")
        
        table.add_column("Metric", style="cyan")
        table.add_column("Value", style="magenta")
        
        elapsed = datetime.now() - self.stats['start_time']
        remaining = self.stats['total_found'] - self.stats['processed'] - self.stats['failed']
        
        table.add_row("Total Videos", str(self.stats['total_found']))
        table.add_row("Processed", f"{self.stats['processed']} ✓")
        table.add_row("Failed", f"{self.stats['failed']} ✗")
        table.add_row("Remaining", str(remaining))
        table.add_row("Success Rate", f"{(self.stats['processed']/(max(self.stats['processed']+self.stats['failed'], 1)))*100:.1f}%")
        table.add_row("Elapsed Time", str(elapsed).split('.')[0])
        table.add_row("Processing Rate", f"{self.stats['processing_rate']:.1f} videos/hour")
        
        if remaining > 0 and self.stats['processing_rate'] > 0:
            eta = timedelta(hours=remaining / self.stats['processing_rate'])
            table.add_row("ETA", str(eta).split('.')[0])
        
        return table
    
    def save_progress_report(self):
        """Save progress report to file"""
        report_path = "/logs/progress_report.json"
        
        report = {
            "timestamp": datetime.now().isoformat(),
            "stats": self.stats,
            "cameras": {}
        }
        
        # Add camera-specific stats
        for camera, camera_stats in self.stats['cameras'].items():
            total = camera_stats['count']
            processed = camera_stats['processed']
            failed = camera_stats['failed']
            remaining = total - processed - failed
            
            report['cameras'][camera] = {
                "total": total,
                "processed": processed,
                "failed": failed,
                "remaining": remaining,
                "success_rate": (processed / max(processed + failed, 1)) * 100
            }
        
        with open(report_path, 'w') as f:
            json.dump(report, f, indent=2)
    
    def process_all_videos(self):
        """Process all videos with progress display"""
        console.print("[bold blue]🚀 Starting Insta360 Directory Processing[/bold blue]")
        
        # Discover videos
        videos = self.discover_videos()
        
        if not videos:
            console.print("[red]No videos found to process![/red]")
            return
        
        # Filter already processed
        videos_to_process = [v for v in videos if not self.is_already_processed(v)]
        already_processed = len(videos) - len(videos_to_process)
        
        if already_processed > 0:
            console.print(f"[yellow]Skipping {already_processed} already processed videos[/yellow]")
        
        if not videos_to_process:
            console.print("[green]All videos already processed![/green]")
            return
        
        console.print(f"[green]Processing {len(videos_to_process)} videos with {self.max_workers} workers[/green]")
        
        # Create progress display
        with Progress(
            "[progress.description]{task.description}",
            BarColumn(),
            "[progress.percentage]{task.percentage:>3.0f}%",
            "•",
            TimeRemainingColumn(),
        ) as progress:
            
            task = progress.add_task("Processing videos...", total=len(videos_to_process))
            
            # Process videos with thread pool
            with concurrent.futures.ThreadPoolExecutor(max_workers=self.max_workers) as executor:
                futures = []
                
                for video in videos_to_process:
                    if self.stop_processing:
                        break
                    
                    future = executor.submit(self.process_single_video, video, progress, task)
                    futures.append(future)
                
                # Monitor completion
                for future in concurrent.futures.as_completed(futures):
                    if self.stop_processing:
                        break
                    
                    try:
                        result = future.result()
                        status = "✓" if result['success'] else "✗"
                        method = result.get('method', 'Failed')
                        duration = result['duration']
                        
                        logging.info(f"{status} {os.path.basename(result['input'])} - {method} ({duration:.1f}s)")
                        
                    except Exception as e:
                        logging.error(f"Processing error: {e}")
                    
                    # Save progress periodically
                    if (self.stats['processed'] + self.stats['failed']) % 10 == 0:
                        self.save_progress_report()
        
        # Final summary
        self.save_progress_report()
        console.print(self.create_status_table())
        
        console.print(f"[bold green]Processing complete! Check /output for results.[/bold green]")

def main():
    if len(sys.argv) < 3:
        console.print("[red]Usage: process_directory.py <input_dir> <output_dir> [max_workers][/red]")
        sys.exit(1)
    
    input_dir = sys.argv[1]
    output_dir = sys.argv[2]
    max_workers = int(sys.argv[3]) if len(sys.argv) > 3 else 2
    
    if not os.path.exists(input_dir):
        console.print(f"[red]Input directory not found: {input_dir}[/red]")
        sys.exit(1)
    
    os.makedirs(output_dir, exist_ok=True)
    
    processor = Insta360DirectoryProcessor(input_dir, output_dir, max_workers)
    processor.process_all_videos()

if __name__ == "__main__":
    main()
EOF

RUN chmod +x /app/process_directory.py

# Create entrypoint script
RUN cat > /entrypoint.sh << 'EOF'
#!/bin/bash

# Start Xvfb for display
Xvfb :99 -screen 0 1920x1080x24 -ac +extension GLX +render -noreset &
export DISPLAY=:99
sleep 2

# Default behavior: process /input to /output
if [ $# -eq 0 ]; then
    exec python3 /app/process_directory.py /input /output 2
else
    exec "$@"
fi
EOF

RUN chmod +x /entrypoint.sh

# Create status monitoring script
RUN cat > /app/monitor.py << 'EOF'
#!/usr/bin/env python3
import json
import time
import os
from rich.console import Console
from rich.table import Table
from rich.live import Live

console = Console()

def load_progress():
    try:
        with open('/logs/progress_report.json', 'r') as f:
            return json.load(f)
    except:
        return None

def create_status_display():
    progress = load_progress()
    if not progress:
        return Table(title="No progress data available")
    
    stats = progress['stats']
    
    table = Table(title="🎥 Insta360 Processing Status")
    table.add_column("Camera", style="cyan")
    table.add_column("Total", style="white")
    table.add_column("Processed", style="green")
    table.add_column("Failed", style="red")
    table.add_column("Remaining", style="yellow")
    table.add_column("Success %", style="magenta")
    
    for camera, data in progress.get('cameras', {}).items():
        table.add_row(
            camera,
            str(data['total']),
            str(data['processed']),
            str(data['failed']),
            str(data['remaining']),
            f"{data['success_rate']:.1f}%"
        )
    
    return table

def monitor():
    with Live(create_status_display(), refresh_per_second=1) as live:
        while True:
            live.update(create_status_display())
            time.sleep(5)

if __name__ == "__main__":
    monitor()
EOF

RUN chmod +x /app/monitor.py

# Set working directory and entrypoint
WORKDIR /app
ENTRYPOINT ["/entrypoint.sh"]
CMD ["python3", "/app/process_directory.py", "/input", "/output", "2"]