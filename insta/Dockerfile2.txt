# Complete Insta360 Directory Processor
# Mount camera directory and get fully processed videos with perfect timestamps
# Usage: docker run --rm --gpus all -v /path/to/camera:/input -v /path/to/output:/output insta360-complete

FROM nvidia/cuda:12.9.1-devel-ubuntu22.04

# Prevent interactive prompts
ENV DEBIAN_FRONTEND=noninteractive

# Complete Insta360 Directory Processor - CUDA 11.1 for MediaSDK compatibility
FROM nvidia/cuda:11.1-devel-ubuntu20.04

# Prevent interactive prompts
ENV DEBIAN_FRONTEND=noninteractive

# Install Python 3.8 and basic tools
RUN apt-get update && apt-get install -y \
    python3.8 \
    python3.8-dev \
    python3.8-distutils \
    wget \
    curl \
    git \
    build-essential \
    cmake \
    pkg-config \
    && rm -rf /var/lib/apt/lists/*

# Install pip for Python 3.8
RUN wget https://bootstrap.pypa.io/get-pip.py && \
    python3.8 get-pip.py && \
    rm get-pip.py && \
    ln -sf /usr/bin/python3.8 /usr/bin/python3

# Install utility packages
RUN apt-get update && apt-get install -y \
    jq \
    bc \
    parallel \
    tree \
    htop \
    ffmpeg \
    && rm -rf /var/lib/apt/lists/*

# Install X11 and graphics libraries
RUN apt-get update && apt-get install -y \
    libgl1-mesa-glx \
    libglib2.0-0 \
    libxrender1 \
    libxext6 \
    libsm6 \
    libxrandr2 \
    libxss1 \
    libxcursor1 \
    libxcomposite1 \
    libasound2 \
    libxi6 \
    libxtst6 \
    xvfb \
    x11-utils \
    mesa-utils \
    && rm -rf /var/lib/apt/lists/*

# Install OpenGL development libraries
RUN apt-get update && apt-get install -y \
    libglfw3 \
    libglfw3-dev \
    libglew-dev \
    libglm-dev \
    && rm -rf /var/lib/apt/lists/*

# Install Vulkan libraries (Ubuntu 18.04 package names)
RUN apt-get update && apt-get install -y \
    vulkan-utils \
    libvulkan1 \
    libvulkan-dev \
    mesa-vulkan-drivers \
    && rm -rf /var/lib/apt/lists/* || echo "Some Vulkan packages not available in Ubuntu 18.04"

# Install Python packages
RUN python3.8 -m pip install --upgrade pip && \
    python3.8 -m pip install numpy opencv-python pillow tqdm rich

# Create working directories
WORKDIR /app
RUN mkdir -p /input /output /logs /temp

# Copy MediaSDK installation files
COPY libMediaSDK-dev-*.deb /tmp/

# Install MediaSDK with debug info
RUN dpkg -i /tmp/libMediaSDK-dev-*.deb || true && \
    apt-get update && \
    apt-get install -f -y && \
    rm /tmp/libMediaSDK-dev-*.deb && \
    ldconfig && \
    echo "=== MediaSDK Installation Debug ===" && \
    echo "Installed packages:" && \
    dpkg -l | grep -i media && \
    echo "MediaSDK binary check:" && \
    ls -la /usr/bin/MediaSDKTest 2>/dev/null || echo "MediaSDKTest not in /usr/bin" && \
    echo "Testing MediaSDK binary:" && \
    ldd /usr/bin/MediaSDKTest || echo "ldd failed" && \
    echo "=== End MediaSDK Debug ==="

# Set up environment variables
ENV NVIDIA_VISIBLE_DEVICES=all
ENV NVIDIA_DRIVER_CAPABILITIES=compute,utility,graphics
ENV DISPLAY=:99
ENV PYTHONUNBUFFERED=1

# Copy Python scripts
COPY process_directory.py /app/
COPY monitor.py /app/

# Make scripts executable
RUN chmod +x /app/process_directory.py /app/monitor.py

# Create entrypoint script
RUN printf '#!/bin/bash\n\n# Start Xvfb for display\nXvfb :99 -screen 0 1920x1080x24 -ac +extension GLX +render -noreset &\nexport DISPLAY=:99\nsleep 2\n\n# Default behavior: process /input to /output\nif [ $# -eq 0 ]; then\n    exec python3.8 /app/process_directory.py /input /output 2\nelse\n    exec "$@"\nfi\n' > /entrypoint.sh

RUN chmod +x /entrypoint.sh

# Set working directory and entrypoint
WORKDIR /app
ENTRYPOINT ["/entrypoint.sh"]
CMD ["python3.8", "/app/process_directory.py", "/input", "/output", "2"]

# Install Python packages
RUN pip3 install --upgrade pip && \
    pip3 install numpy opencv-python pillow tqdm rich

# Create working directories
WORKDIR /app
RUN mkdir -p /input /output /logs /temp

# Copy MediaSDK installation files
COPY libMediaSDK-dev-*.deb /tmp/

# Install MediaSDK
RUN dpkg -i /tmp/libMediaSDK-dev-*.deb || true && \
    apt-get update && \
    apt-get install -f -y && \
    rm /tmp/libMediaSDK-dev-*.deb && \
    ldconfig && \
    echo "=== MediaSDK Installation Debug ===" && \
    echo "Installed packages:" && \
    dpkg -l | grep -i media && \
    echo "Binaries in /usr/local/bin:" && \
    ls -la /usr/local/bin/ || echo "No /usr/local/bin directory" && \
    echo "Binaries in /usr/bin containing 'stitch' or 'media':" && \
    find /usr -name "*stitch*" -o -name "*media*" -o -name "*MediaSDK*" 2>/dev/null || echo "No matching binaries found" && \
    echo "=== End MediaSDK Debug ==="

# Set up environment variables
ENV NVIDIA_VISIBLE_DEVICES=all
ENV NVIDIA_DRIVER_CAPABILITIES=compute,utility,graphics
ENV DISPLAY=:99
ENV PYTHONUNBUFFERED=1

# Copy Python scripts (we'll create these separately)
COPY process_directory.py /app/
COPY monitor.py /app/

# Make scripts executable
RUN chmod +x /app/process_directory.py /app/monitor.py

# Create entrypoint script
RUN printf '#!/bin/bash\n\n# Start Xvfb for display\nXvfb :99 -screen 0 1920x1080x24 -ac +extension GLX +render -noreset &\nexport DISPLAY=:99\nsleep 2\n\n# Default behavior: process /input to /output\nif [ $# -eq 0 ]; then\n    exec python3 /app/process_directory.py /input /output 2\nelse\n    exec "$@"\nfi\n' > /entrypoint.sh

RUN chmod +x /entrypoint.sh

# Set working directory and entrypoint
WORKDIR /app
ENTRYPOINT ["/entrypoint.sh"]
CMD ["python3", "/app/process_directory.py", "/input", "/output", "2"]